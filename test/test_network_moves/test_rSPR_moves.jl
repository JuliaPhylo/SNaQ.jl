using PhyloNetworks, Test
import SNaQ:
    apply_move!, perform_rSPR!, is_valid_rSPR, semidirect_network!,
    sample_rSPR_parameters

#### Helper functions ####
function reload_labelled_net()
    net = readnewick("((a,b)i1,((c,#H1)i6,(d,((e,f)i5)#H1)i3)i2)r;")
    semidirect_network!(net)
    net.hybrid[1].name = "i4"   # do it here so that PhyloNetworks doesn't through a warning
    return net
end
get_nodes(net::HybridNetwork, names::String...) = Tuple([
    net.node[findfirst(node -> node.name == name, net.node)] for name in names
])

###############################################################
# FIRST: TESTS THAT WHOSE OUTCOMES HAVE BEEN VERIFIED BY HAND #
###############################################################

net = reload_labelled_net()
@test is_valid_rSPR(get_nodes(net, "i1", "i3", "i6", "i2", "i4", "i5")...)
@test !is_valid_rSPR(get_nodes(net, "i1", "i3", "i6", "i2", "i5", "i4")...)
@test !is_valid_rSPR(get_nodes(net, "i3", "i1", "i2", "i6", "i4", "i5")...)

apply_move!(net, :rSPR, get_nodes(net, "i1", "i3", "i6", "i2", "i4", "i5"))
@test writenewick(net) == "(d,(((e,f)i5,(a,b)i1)i2)#i4,(c,#i4)i6)i3;"

apply_move!(net, :rSPR, get_nodes(net, "i6", "i3", "i2", "i4", "i5", "e"))
@test writenewick(net) == "(d,((f,(e)#i4)i5,(a,b)i1)i2,(c,#i4)i6)i3;"


##########################################################
# SECOND: VERIFY THAT REVERSIBLE MOVES DO INDEED REVERSE #
##########################################################

net = reload_labelled_net()
w, x, y, z, xprime, yprime = get_nodes(net, "i1", "i3", "i6", "i2", "i4", "i5")
apply_move!(net, :rSPR, (w, x, y, z, xprime, yprime))

w, x, y, z, xprime, yprime = get_nodes(net, "i1", "i3", "i6", "i2", "i4", "i5")
perform_rSPR!(net, w, xprime, yprime, z, x, y)

# Topology might be identical, but the string generated by `writenewick` might be different.
# To avoid this, we re-root the network where its original root was, then make it
# semi-directed again to match
edge_i1i2 = findfirst(e -> sort([e.node[1].name, e.node[2].name]) == ["i1", "i2"], net.edge)
PhyloNetworks.rootonedge!(net, edge_i1i2)
semidirect_network!(net)
@test writenewick(net) == writenewick(reload_labelled_net())


net = reload_labelled_net()
w, x, y, z, xprime, yprime = get_nodes(net, "i6", "i3", "i5", "i4", "i2", "i1")
perform_rSPR!(net, w, x, y, z, xprime, yprime)
w, x, y, z, xprime, yprime = get_nodes(net, "i6", "i3", "i5", "i4", "i2", "i1")
perform_rSPR!(net, w, xprime, yprime, z, x, y)

# Topology might be identical, but the string generated by `writenewick` might be different.
# To avoid this, we re-root the network where its original root was, then make it
# semi-directed again to match
edge_i1i2 = findfirst(e -> sort([e.node[1].name, e.node[2].name]) == ["i1", "i2"], net.edge)
PhyloNetworks.rootonedge!(net, edge_i1i2)
semidirect_network!(net)
@test writenewick(net) == writenewick(reload_labelled_net())


#######################################################################
# THIRD: RUN A LOT OF NETWORK MOVES AND MAKE SURE THAT NOTHING BREAKS #
#######################################################################



rng = Random.seed!(0)
net = reload_labelled_net()
global prev_newick = ""
for j = 1:1000
    global prev_newick
    prev_newick = writenewick(net)
    params = sample_rSPR_parameters(net, rng)
    perform_rSPR!(net, params...)
    @test findfirst(tip -> !occursin(tip, writenewick(net)), tipLabels(net)) === nothing
    @test_nowarn writenewick(net)
    @test prev_newick != writenewick(net)
end




